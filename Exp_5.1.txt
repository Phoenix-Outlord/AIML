!pip install numpy scikit-learn lime
!pip install graphviz scikit-learn




import numpy as np
import pandas as pd
import graphviz
from sklearn.tree import export_graphviz
from IPython.display import Image
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from lime.lime_tabular import LimeTabularExplainer
from sklearn.model_selection import train_test_split



dataset = pd.read_csv('Social_Network_Ads.csv')
dataset.head()




#One Hot Encoding
dataset['Gender']=pd.get_dummies(dataset['Gender'],drop_first=True)




#Train Test Split
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)



#Build Decision-Tree Model
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)




#Use Lime Model
explainer = LimeTabularExplainer(X_train, mode="classification")
data_point = X_test[7]
# Explain the prediction of DecisionTee
explanation = explainer.explain_instance(data_point,  classifier.predict_proba, num_features=2)
# Display the explanation
explanation.show_in_notebook()




X_test, y_test



data_point = X_test[4]
# Explain the prediction for the chosen data point of DecisionTee
explanation = explainer.explain_instance(data_point, classifier.predict_proba)
# Display the explanation
explanation.show_in_notebook()



X_test[1]


##Build Gaussian Model
classifier_G = GaussianNB()
classifier_G.fit(X_train, y_train)




data_point = X_test[7]
# Explain the prediction for the chosen data point of GaussianNB
explanation = explainer.explain_instance(data_point, classifier_G.predict_proba)
# Display the explanation
explanation.show_in_notebook()






data_point = X_test[4]
# Explain the prediction for the chosen data point of GaussianNB
explanation = explainer.explain_instance(data_point, classifier_G.predict_proba)
# Display the explanation
explanation.show_in_notebook()





feature_names = ['age', 'salary','gender','purchased']
class_names = ['No', 'Yes']
# Export the decision tree to a DOT file
dot_data=export_graphviz(classifier, out_file=None,
                           feature_names=feature_names,
                           class_names=class_names,
                           filled=True, rounded=True,
                           special_characters=True)







# Visualize the decision tree
graph = graphviz.Source(dot_data)
# Change format to "png" or "svg"
graph.render("your_dataset_decision_tree", format="png")
# Open the visualization in your default viewer
graph.view()




#Display Visualize decision tree
Image('/content/your_dataset_decision_tree.png')








